// <auto-generated />
using System;
using BlazorWorld.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlazorWorld.Data.Migrations.MySql
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20201128010107_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BlazorWorld.Core.Entities.Common.EntityCustomFields", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField16")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField17")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField18")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField19")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField20")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomField9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField1")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField10")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField11")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField12")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField13")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField14")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField15")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField16")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField17")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField18")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField19")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField2")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField20")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField3")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField4")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField5")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField6")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField7")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField8")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IndexedCustomField9")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("IndexedCustomField1");

                    b.HasIndex("IndexedCustomField10");

                    b.HasIndex("IndexedCustomField11");

                    b.HasIndex("IndexedCustomField12");

                    b.HasIndex("IndexedCustomField13");

                    b.HasIndex("IndexedCustomField14");

                    b.HasIndex("IndexedCustomField15");

                    b.HasIndex("IndexedCustomField16");

                    b.HasIndex("IndexedCustomField17");

                    b.HasIndex("IndexedCustomField18");

                    b.HasIndex("IndexedCustomField19");

                    b.HasIndex("IndexedCustomField2");

                    b.HasIndex("IndexedCustomField20");

                    b.HasIndex("IndexedCustomField3");

                    b.HasIndex("IndexedCustomField4");

                    b.HasIndex("IndexedCustomField5");

                    b.HasIndex("IndexedCustomField6");

                    b.HasIndex("IndexedCustomField7");

                    b.HasIndex("IndexedCustomField8");

                    b.HasIndex("IndexedCustomField9");

                    b.ToTable("EntityCustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Configuration.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Action")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NodeId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("NodeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.EntityTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ActivityId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BadgeId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("EntityId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupMemberId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("InvitationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NodeId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NodeVersionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NodeVoteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ReactionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SettingId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("EntityId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("NodeId");

                    b.HasIndex("NodeVersionId");

                    b.HasIndex("NodeVoteId");

                    b.HasIndex("ReactionId");

                    b.HasIndex("SettingId");

                    b.HasIndex("SiteId");

                    b.HasIndex("Tag");

                    b.ToTable("EntityTags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Module")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("GroupId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Node", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ChildCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("DescendantCount")
                        .HasColumnType("int");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double>("Hot")
                        .HasColumnType("double");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeVersions");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("NodeId");

                    b.HasIndex("NodeId", "UserId");

                    b.ToTable("NodeVotes");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Reaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("ContentId", "UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Badge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("UserId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<string>("Module")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.GroupMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupId", "UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Invitation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("Email");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Site", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CustomFieldsId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TenantId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldsId");

                    b.HasIndex("TenantId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Configuration.Setting", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Activity", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.EntityTag", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Content.Activity", null)
                        .WithMany("Tags")
                        .HasForeignKey("ActivityId");

                    b.HasOne("BlazorWorld.Core.Entities.Organization.Badge", null)
                        .WithMany("Tags")
                        .HasForeignKey("BadgeId");

                    b.HasOne("BlazorWorld.Core.Entities.Organization.Group", null)
                        .WithMany("Tags")
                        .HasForeignKey("GroupId");

                    b.HasOne("BlazorWorld.Core.Entities.Organization.GroupMember", null)
                        .WithMany("Tags")
                        .HasForeignKey("GroupMemberId");

                    b.HasOne("BlazorWorld.Core.Entities.Organization.Invitation", null)
                        .WithMany("Tags")
                        .HasForeignKey("InvitationId");

                    b.HasOne("BlazorWorld.Core.Entities.Content.Message", null)
                        .WithMany("Tags")
                        .HasForeignKey("MessageId");

                    b.HasOne("BlazorWorld.Core.Entities.Content.Node", null)
                        .WithMany("Tags")
                        .HasForeignKey("NodeId");

                    b.HasOne("BlazorWorld.Core.Entities.Content.NodeVersion", null)
                        .WithMany("Tags")
                        .HasForeignKey("NodeVersionId");

                    b.HasOne("BlazorWorld.Core.Entities.Content.NodeVote", null)
                        .WithMany("Tags")
                        .HasForeignKey("NodeVoteId");

                    b.HasOne("BlazorWorld.Core.Entities.Content.Reaction", null)
                        .WithMany("Tags")
                        .HasForeignKey("ReactionId");

                    b.HasOne("BlazorWorld.Core.Entities.Configuration.Setting", null)
                        .WithMany("Tags")
                        .HasForeignKey("SettingId");

                    b.HasOne("BlazorWorld.Core.Entities.Organization.Site", null)
                        .WithMany("Tags")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Message", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Node", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVersion", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVote", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Reaction", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Badge", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Group", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.GroupMember", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Invitation", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Site", b =>
                {
                    b.HasOne("BlazorWorld.Core.Entities.Common.EntityCustomFields", "CustomFields")
                        .WithMany()
                        .HasForeignKey("CustomFieldsId");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Configuration.Setting", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Activity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Message", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Node", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVersion", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.NodeVote", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Content.Reaction", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Badge", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Group", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.GroupMember", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Invitation", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlazorWorld.Core.Entities.Organization.Site", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
